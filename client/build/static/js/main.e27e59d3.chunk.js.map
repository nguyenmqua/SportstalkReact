{"version":3,"sources":["utils/UserContext.js","utils/API.js","components/Edit/index.js","components/Login/index.js","components/Post/index.js","components/Comments/index.js","components/Odds/index.js","components/SearchForm/index.js","components/Bet/index.js","components/Notifications/index.js","pages/Newsfeed.js","components/Signup/index.js","pages/Auth/Auth.js","pages/NoMatch.js","pages/Wager.js","components/Ticker/index.js","components/MenuNotificaitons/index.js","components/TopNav/index.js","components/UserPost/index.js","components/UpdateResults/index.js","components/UserBet/index.js","components/Result/index.js","pages/Member.js","App.js","index.js"],"names":["UserContext","React","createContext","userData","loggedIn","user","failureMessage","post","notifications","AllPost","handleInputChange","handleLogin","handleSignup","logout","deleteNotifications","loadPost","setPost","deletePost","login","loginInfo","axios","signup","signupInfo","isLoggedIn","get","getUserData","id","postPost","data","newsfeed","newsfeedByID","delete","getPost","postComment","getComment","getNFL","getSportsNews","getUpdateProfilePic","profilePic","getUsers","getUser","postBet","console","log","getBet","updateBet","put","getUserBet","settleBet","getNotifications","completeBet","Edit","useState","Open","setOpen","useContext","imageSelected","setImageSelected","setLoading","uploadImage","e","a","FormData","append","fetch","method","body","res","json","file","API","userId","_id","secure_url","window","location","href","Modal","open","onClose","onOpen","trigger","Button","color","style","fontSize","Header","Content","image","Description","Form","Input","type","name","placeholder","onChange","event","target","files","Actions","negative","onClick","positive","Login","loginFailureMessage","Grid","textAlign","height","margin","verticalAlign","Column","maxWidth","paddingRight","as","size","Segment","fluid","icon","iconPosition","value","username","password","Message","error","to","Post","props","handleUserBtnClick","Card","Group","className","Image","circular","src","firstname","TextArea","floated","h1","marginTop","padding","button","CommentSection","Comments","setComments","newComment","setNewComment","showComment","setshowComment","useEffect","loadComments","then","rows","content","labelPosition","primary","preventDefault","comment","postId","catch","err","Comment","map","key","Avatar","Author","Metadata","moment","date","fromNow","Text","Odds","NFLgames","scrolling","game","teams","Table","celled","structured","Row","HeaderCell","rowSpan","sites_count","colSpan","Body","sites","site","site_key","Cell","site_nice","odds","spreads","points","SearchForm","users","search","handleInputClick","htmlFor","list","Bet","setNFLgames","pickEm","setPickEm","setUsers","setSearch","wager","setWager","loadNFL","loadUsers","footballColor","team","secondary","handleChange","arr","backgroundColor","stackable","columns","padded","compact","definition","fullWidth","home_team","Label","basic","pointing","length","pick","bets","sportTicket","competitor","Notifications","Feed","notification","Event","Popup","Icon","fitted","Summary","Date","createdAt","Extra","updater","winner","Newsfeed","width","borderColor","centered","creatAt","format","header","Meta","startOf","only","Signup","validFirstName","setValidFirstName","validLastName","setValidLastName","validEmail","setValidEmail","validUserName","setValidUserName","validPassword","setValidPassword","isConfirmed","setIsConfirmed","confirmPassword","setConfirmPassword","errorMessage","setErrorMessage","Field","control","onBlur","valid","toString","lastname","email","RegExp","test","onKeyUp","disabled","Auth","action","NoMatch","Wager","currentWager","setCurrentWager","currentWagerAuthor","setCurrentWagerAuthor","currentSportTicket","setCurrentSportTicket","useParams","loadWager","ticket","extra","StockTicker","position","Navigation","Menu","borderless","postion","Item","UserPost","inverted","UpdateResults","bet","setWinner","submitWinner","relaxed","raised","Divider","vertical","Radio","label","checked","UserBet","allBets","completed","divided","Results","Member","setAllPost","setAllBets","panes","menuItem","render","Tab","Pane","Result","menu","tabular","App","setUserData","setLoggedin","setUser","setFailureMessage","setLoginFailureMessage","setNotifications","message","contextValue","Provider","TopNav","exact","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e27e59d3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst UserContext = React.createContext({\r\n  userData: {},\r\n  loggedIn: false,\r\n  user: {},\r\n  failureMessage: \"\",\r\n  post: {},\r\n  notifications:{},\r\n  AllPost:{},\r\n  handleInputChange: () => {},\r\n  handleLogin: () => {},\r\n  handleSignup: () => {},\r\n  logout: () => {},\r\n  deleteNotifications: () => {},\r\n  loadPost: () => {},\r\n  setPost: ()=>{},\r\n  deletePost: ()=>{}\r\n});\r\n\r\nexport default UserContext;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  login: function (loginInfo) {\r\n    return axios.post('/api/users/login', loginInfo);\r\n  },\r\n\r\n  signup: function (signupInfo) {\r\n    return axios.post('/api/users/signup', signupInfo);\r\n  },\r\n\r\n  isLoggedIn: function () {\r\n    return axios.get('/api/users/profile');\r\n  },\r\n\r\n  logout: function () {\r\n    return axios.get('/api/users/logout');\r\n  },\r\n\r\n  getUserData: function(id){\r\n    return axios.get(\"/api/login/\" + id)\r\n  },\r\n\r\n  postPost: function(data){\r\n    return axios.post(\"/api/post\", data)\r\n  },\r\n\r\n  newsfeed: function(){\r\n    return axios.get(\"/api/newsfeed\")\r\n  },\r\n\r\n  newsfeedByID: function(id){\r\n    \r\n    return axios.get(\"/api/newsfeed/\"+id)\r\n  },\r\n\r\n  deletePost: function(id) {\r\n    return axios.delete(\"/api/post/\" + id);\r\n  },\r\n\r\n  getPost: function(id){\r\n    return axios.get(\"/api/post/\" +id)\r\n  },\r\n  \r\n  postComment: function(data){\r\n    return axios.post(\"/api/comments\",data)\r\n  },\r\n\r\n  getComment: function(id){\r\n    return axios.get(\"/api/comments/\"+id)\r\n  },\r\n\r\n  getNFL: function (){\r\n    return axios.get(\"/api/sportsdata\")\r\n  },\r\n\r\n  getSportsNews: function () {\r\n    return axios.get(\"/api/sportsnews\")\r\n  },\r\n\r\n  getUpdateProfilePic(profilePic){\r\n    return axios.post(\"/api/profile/\", profilePic)\r\n  },\r\n\r\n  getUsers(){\r\n    return axios.get(\"/api/usersdata\")\r\n  },\r\n\r\n  getUser(id){\r\n    return axios.get(\"/api/usersdata/\"+id)\r\n  },\r\n\r\n  postBet(data){\r\n    console.log(data)\r\n    return axios.post(\"/api/bets\", data )\r\n  },\r\n\r\n  getBet(id){\r\n    return axios.get(\"/api/bets/\"+id)\r\n  },\r\n\r\n  updateBet(id){\r\n    return axios.put(\"/api/bets/\", id)\r\n  },\r\n\r\n  getUserBet(id){\r\n    \r\n    return axios.get(\"/api/userbet/\"+id)\r\n  },\r\n \r\n  settleBet(data){\r\n    console.log(data)\r\n    return axios.put(\"/api/userbet\",data)\r\n  },\r\n  getNotifications(id){\r\n    \r\n    return axios.get(\"/api/notifications/\" + id)\r\n  },\r\n\r\n  deleteNotifications(id){\r\n    \r\n    return axios.delete(\"/api/notifications/\" + id)\r\n  },\r\n\r\n  completeBet(id){\r\n    return axios.put(\"/api/results\",id)\r\n  }\r\n  \r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport UserContext from '../../utils/UserContext';\r\nimport { Button, Modal} from 'semantic-ui-react'\r\nimport API from '../../utils/API';\r\nimport {Form, Input} from 'reactstrap'\r\n\r\nconst Edit  = () => {\r\n    const [Open, setOpen] = useState(false)\r\n    const {user} =useContext(UserContext)\r\n    const [imageSelected, setImageSelected] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n\r\n\r\n    const uploadImage = async (e) => {\r\n        const data = new FormData()\r\n        data.append('file', imageSelected)\r\n        data.append('upload_preset', 'janishto')\r\n        setLoading(true)\r\n        const res = await fetch(\r\n          'https://api.cloudinary.com/v1_1/sportstalk/image/upload',\r\n          {\r\n            method: 'POST',\r\n            body: data\r\n          }\r\n        )\r\n        const file = await res.json()\r\n\r\n      API.getUpdateProfilePic({\r\n          userId: user._id,\r\n          profilePic: file.secure_url\r\n        })\r\n        window.location.href = '/';\r\n            \r\n        }\r\n\r\n    ;\r\n    return(\r\n        <>\r\n        <Modal\r\n        open={Open}\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        trigger={<Button id=\"headers\" color=\"blue\" style={{fontSize: \"20px\"}}>Edit Profile Pic</Button>}\r\n        >\r\n        <Modal.Header id=\"headers\" style={{fontSize:\"50px\"}}>Select Profile Pic</Modal.Header>\r\n        <Modal.Content image>\r\n            <Modal.Description>\r\n            <Form>\r\n                <Input\r\n                    type=\"file\"\r\n                    name=\"file\"\r\n                    placeholder=\"profile image\"\r\n                    onChange={(event) => {\r\n                    setImageSelected(event.target.files[0]);\r\n                    }}\r\n                />\r\n            </Form>\r\n            </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button negative onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button positive onClick={uploadImage}>\r\n            Submit\r\n          </Button>\r\n        </Modal.Actions>\r\n        \r\n      </Modal>\r\n    </>\r\n    )\r\n};\r\n\r\nexport default Edit","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport UserContext from '../../utils/UserContext';\r\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\r\n\r\nconst Login = () => {\r\n  const { userData, handleInputChange, handleLogin, loginFailureMessage } = useContext(UserContext);\r\n\r\n  return (\r\n    <Grid textAlign='center' style={{ height: '100vh', margin:\"10px\"  }} verticalAlign='top'>\r\n    <Grid.Column style={{ maxWidth: 450, paddingRight:\"10px\"  }}>\r\n      <Header as='h2' color='blue' textAlign='center'>\r\n         Log-in to your account\r\n      </Header>\r\n      <Form size='large'>\r\n        <Segment >\r\n          <Form.Input \r\n            type=\"text\"\r\n            name =\"username\"\r\n            fluid icon='user' \r\n            iconPosition='left' \r\n            placeholder='user' \r\n            value={userData.username}\r\n            onChange={handleInputChange}/>\r\n          <Form.Input\r\n            type = \"text\"\r\n            name = \"password\"\r\n            fluid icon='lock'\r\n            iconPosition='left'\r\n            placeholder='Password'\r\n            type='password'\r\n            value={userData.password}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <Button onClick={handleLogin} color='blue' fluid size='large'>\r\n            Login\r\n          </Button>\r\n        </Segment>\r\n      </Form>\r\n      {loginFailureMessage ? <Message error>{loginFailureMessage}</Message> : <p></p>}\r\n      <Message>\r\n      <Link to=\"/signup\">New to us? Sign Up</Link>\r\n      </Message>\r\n    </Grid.Column>\r\n  </Grid>\r\n    \r\n  \r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useContext } from \"react\";\r\nimport { Form,  Image, Card} from \"semantic-ui-react\"\r\nimport UserContext from '../../utils/UserContext';\r\n\r\n\r\n\r\nfunction Post(props) {\r\n  const { user, setPost, handleUserBtnClick } = useContext(UserContext);\r\n  \r\n  return (\r\n      <> \r\n      <Card.Group className=\"post\">\r\n        <Card fluid color=\"blue\">\r\n          <Card.Content>\r\n            <Card.Header  style={{ color:\"#008ae6\" }} as=\"h2\">\r\n              <Image circular size=\"mini\" src={user && user.profilePic}/>{user && user.firstname}, what is on your mind?\r\n            </Card.Header>\r\n            <Card.Description>\r\n              <Form>\r\n                <Form.TextArea onChange={(e) => setPost(e.target.value)} placeholder='What sup?' />\r\n                <Form.Button floated=\"right\" color=\"green\" onClick ={handleUserBtnClick}>Post</Form.Button>\r\n              </Form>\r\n            </Card.Description>\r\n          </Card.Content>\r\n        </Card>\r\n      </Card.Group>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\nexport default Post;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport API from \"../../utils/API\"\r\nimport { Button, Comment, Form, TextArea } from 'semantic-ui-react'\r\nimport UserContext from '../../utils/UserContext';\r\nimport moment from 'moment'\r\n\r\nconst style = {\r\n  h1: {\r\n    marginTop: \"10px\",\r\n    padding: \"5px\"\r\n  },\r\n    button: {\r\n     padding: \"10px\"\r\n  }\r\n}\r\n\r\n\r\n\r\nconst CommentSection = ({ post }) => {\r\n    const { user} = useContext(UserContext);\r\n    const [Comments, setComments] = useState([])\r\n    const [newComment, setNewComment] = useState(\"\")\r\n    const [showComment, setshowComment] = useState(false)\r\n\r\n    useEffect(() => {\r\n        loadComments()\r\n      }, [])\r\n\r\n    const loadComments = () => {\r\n        API.getComment(post)\r\n        .then(res => {\r\n             setComments(res.data)  \r\n        })\r\n    }\r\n\r\n    const handleCommentPost = (event) =>{\r\n      event.preventDefault();\r\n        API.postComment({\r\n            comment: newComment,\r\n            userId: user._id,\r\n            postId: post\r\n        })\r\n        .then( res=>{\r\n          setNewComment(\"\")\r\n          setComments(res.data.Comments) \r\n    \r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n    }\r\n    function showCommentInfo(){\r\n      setshowComment(!showComment)\r\n  }\r\n    return (\r\n             <>\r\n             <Button color= \"blue\" style = {style.button} onClick={showCommentInfo}>\r\n                  Comments\r\n            </Button>\r\n            {showComment ? (\r\n              <>\r\n              <Form style={style.h1}>\r\n                <TextArea value={newComment} rows={2} onChange={(e) => setNewComment(e.target.value)} placeholder='Reply here' />\r\n                <Form.Button style={style.h1} content='Add Reply' floated=\"right\"labelPosition='left' icon='edit' primary onClick={handleCommentPost}/>\r\n              </Form>\r\n              <Comment.Group>\r\n              {Comments.map(comment=>(\r\n                <Comment key={comment._id}>\r\n                <Comment.Avatar src={comment.userId.profilePic} />\r\n                <Comment.Content>\r\n                  <Comment.Author as='a'>{comment.userId.username}</Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div> {moment(comment.date).fromNow()}</div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.comment}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment> \r\n            ))}\r\n              </Comment.Group> \r\n                </> \r\n            ):(<p></p>)}\r\n                 </> \r\n        )\r\n    }\r\n\r\nexport default CommentSection","import React, { useState, useEffect} from 'react';\r\nimport { Button, Modal,Card, Table } from 'semantic-ui-react'\r\nimport API from '../../utils/API';\r\n\r\nconst Odds = () => {\r\n    const [Open, setOpen] = useState(false)\r\n    const [NFLgames, setNFLgames] = useState([])\r\n    const [pickEm, setPickEm] = useState({})\r\n\r\n\r\n    useEffect(()=>{\r\n        // API.getNFL()\r\n        // .then(res => {\r\n        //     console.log(res.data)\r\n        //     setNFLgames(res.data)\r\n        //     })\r\n    }, []);\r\n    return(\r\n        <>\r\n        <Modal\r\n        open={Open}\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        trigger={<Button id=\"headers\" color=\"blue\" style={{fontSize: \"20px\"}}>Compare Sportsbooks</Button>}\r\n        >\r\n        <Modal.Header id=\"headers\" style={{fontSize: \"50px\"}}>Compare Sportsbook</Modal.Header>\r\n        <Modal.Content scrolling>\r\n            <Modal.Description>\r\n            <Card.Group>\r\n            {NFLgames.map(game=>( \r\n                \r\n                <Card fluid color='green' key={game.teams[0]+game.teams[1]}>\r\n                    <Card.Content>\r\n                        <Card.Header color=\"blue\">{game.teams[0] + \" vs \" + game.teams[1]}</Card.Header>\r\n                        <Table celled structured>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell id=\"headers\" style={{fontSize: \"18px\"}}rowSpan={game.sites_count}>SportBook Sites</Table.HeaderCell>\r\n                                    <Table.HeaderCell id=\"headers\" style={{fontSize: \"18px\"}}colSpan='2'>Points Spread</Table.HeaderCell>\r\n                                    <Table.HeaderCell id=\"headers\" style={{fontSize: \"18px\"}}colSpan='2'>Odds</Table.HeaderCell> \r\n                                </Table.Row>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>{game.teams[0]}</Table.HeaderCell>\r\n                                    <Table.HeaderCell>{game.teams[1]}</Table.HeaderCell>\r\n                                    <Table.HeaderCell>{game.teams[0]}</Table.HeaderCell>\r\n                                    <Table.HeaderCell>{game.teams[1]}</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {game.sites.map(site=>(\r\n                                <Table.Row key={site.site_key}>\r\n                                    <Table.Cell >{site.site_nice}</Table.Cell>\r\n                                    <Table.Cell>{site.odds.spreads.points[0]}</Table.Cell>\r\n                                    <Table.Cell>{site.odds.spreads.points[1]}</Table.Cell>\r\n                                    <Table.Cell>{site.odds.spreads.odds[0]}</Table.Cell>\r\n                                    <Table.Cell>{site.odds.spreads.odds[1]}</Table.Cell>\r\n                                </Table.Row>\r\n                                ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                     </Card.Content>\r\n                </Card>\r\n            ))} \r\n            </Card.Group>\r\n            </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button negative onClick={() => setOpen(false)}>\r\n            Close\r\n          </Button>\r\n        </Modal.Actions>\r\n        \r\n      </Modal>\r\n    </>\r\n    )\r\n};\r\n\r\nexport default Odds","import React from \"react\";\r\n\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm({users, search, handleInputChange, handleInputClick}) {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"user\">Search Member UserName</label>\r\n        <input\r\n          value={search}\r\n          onChange={handleInputChange}   \r\n          name={\"user\"}\r\n          list=\"users\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search User\"\r\n          id=\"user\"\r\n        />\r\n        <datalist id=\"users\">\r\n          {users.map(user => (\r\n            <option value={user._id} key={user.username}>{user.username}</option>\r\n          ))}\r\n        </datalist>\r\n        \r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Table,\r\n  Label,\r\n  Grid,\r\n  Card,\r\n  Input,\r\n} from \"semantic-ui-react\";\r\nimport API from \"../../utils/API\";\r\nimport SearchForm from \"../../components/SearchForm\";\r\n\r\n\r\n\r\nconst Bet = () => {\r\n  const { user } = useContext(UserContext);\r\n  const [Open, setOpen] = useState(false);\r\n  const [NFLgames, setNFLgames] = useState([]);\r\n  const [pickEm, setPickEm] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [wager, setWager] = useState({});\r\n\r\n  useEffect(() => {\r\n    loadNFL();\r\n    loadUsers();\r\n  }, []);\r\n\r\n  \r\n\r\n  const footballColor = (team) =>{\r\n    switch(team) {\r\n      case \"Arizona Cardinals\":\r\n        return {primary: \"#97233F\", secondary: \"#000000\"}\r\n      case \"Atlanta Falcons\":\r\n        return {primary: \"#A71930\", secondary: \"#000000\"}\r\n      case \"Baltimore Ravens\":\r\n        return {primary:\"#241773\", secondary:\"#000000\"}\r\n      case \"Buffalo Bills\":\r\n        return {primary:\"#00338D\", secondary:\"#C60C30\"}\r\n      case \"Carolina Panthers\":\r\n        return {primary:\"#0085CA\", secondary:\"#000000\"}\r\n      case \"Chicago Bears\":\r\n        return {primary:\"#C83803\", secondary:\"#0B162A\"}\r\n      case \"Cincinnati Bengals\":\r\n        return {primary:\"#FB4F14\", secondary:\"#000000\"} \r\n      case \"Cleveland Browns\":\r\n        return {primary:\"#311D00\", secondary:\"#FF3C00\"}\r\n      case \"Dallas Cowboys\":\r\n        return {primary:\"#003594\", secondary:\"#869397\"}\r\n      case \"Denver Broncos\":\r\n        return {primary:\"#FB4F14\", secondary:\"#002244\"}\r\n      case \"Detriot Lions\":\r\n          return {primary:\"#0076B6\", secondary:\"#B0B7BC\"}\r\n      case \"Green Bay Packers\":\r\n          return {primary:\"#FFB612\", secondary:\"#203731\"}\r\n      case \"Houston Texans\":\r\n          return {primary:\"#03202F\", secondary:\"#A71930\"}\r\n      case \"Indianapolis Colts\":\r\n          return {primary:\"#002C5F\", secondary:\"#A2AAAD\"}\r\n      case \"Jacksonville Jaguars\":\r\n          return {primary:\"#101820\", secondary:\"#D7A22A\"}\r\n      case \"Kansas City Chiefs\":\r\n          return {primary:\"#E31837\", secondary:\"#FFB81C\"}\r\n      case \"Los Angeles Chargers\":\r\n          return {primary:\"#D7A22A\", secondary:\"#000000\"}\r\n      case \"Los Angeles Rams\":\r\n          return {primary:\"#003594\", secondary:\"#FFA300\"}\r\n      case \"Miami Dolphins\":\r\n          return {primary:\"#008E97\", secondary:\"#FC4C02\"}\r\n      case \"Minnesota Vikings\":\r\n          return {primary:\"#4F2683\", secondary:\"#FFC62F\"}\r\n      case \"New England Patriots\":\r\n          return {primary:\"#002244\", secondary:\"#C60C30\"}\r\n      case \"New Orleans Saints\":\r\n          return {primary:\"#D3BC8D\", secondary:\"#101820\"}\r\n      case \"New York Giants\":\r\n          return {primary:\"#0B2265\", secondary:\"#A71930\"}\r\n      case \"New York Jets\":\r\n          return {primary:\"#125740\", secondary:\"#000000\"}\r\n      case \"Las Vegas Raiders\":\r\n          return {primary:\"#000000\", secondary:\"#A5ACAF\"}\r\n      case \"Philadelphia Eagles\":\r\n          return {primary:\"#004C54\", secondary:\"#A5ACAF\"}\r\n      case \"Pittsburgh Steelers\":\r\n          return {primary:\"#FFB612\", secondary:\"#0000000\"}\r\n      case \"San Francisco 49ers\":\r\n          return {primary:\"#AA0000\", secondary:\"#B3995D\"}\r\n      case \"Seattle Seahawks\":\r\n          return {primary:\"#69BE28\", secondary:\"#002244\"}\r\n      case \"Tampa Bay Buccaneers\":\r\n          return {primary:\"#D50A0A\", secondary:\"#FF7900\"}\r\n      case \"Tennessee Titans\":\r\n          return {primary:\"#0C2340\", secondary:\"#4B92DB\"}\r\n      case \"Washington Redskins\":\r\n          return {primary:\"#773141;\", secondary:\"#FFB612\"}\r\n        break;\r\n      default:\r\n        return {primary: \"blue\"}\r\n    }\r\n  }\r\n  const handleChange = (event, { value }) => {\r\n    setPickEm((arr) => [...arr, value]);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const bets = {\r\n      sportTicket: pickEm,\r\n      competitor: search,\r\n      userId: user._id,\r\n      wager: wager,\r\n    };\r\n    API.postBet(bets)\r\n      .then((res) => {\r\n        setOpen(false);\r\n        setSearch(\"\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const loadNFL = () => {\r\n    API.getNFL().then((res) => {\r\n      console.log(res.data);\r\n      setNFLgames(res.data);\r\n    });\r\n  };\r\n\r\n  const loadUsers = () => {\r\n    API.getUsers().then((res) => {\r\n      setUsers(res.data);\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  // const handleInputClick= (event) => {\r\n  //     console.log(search.length)\r\n  //     if (search.length >0){\r\n  //     API.getUser(search)\r\n  //     .then(res=>{\r\n  //         console.log(res.data[0]._id)\r\n  //         setCompetitor(res.data[0]._id)})\r\n  //     }\r\n  // }\r\n\r\n  const handleInputBet = (event, { name }) => {\r\n    setWager(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={Open}\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        trigger={\r\n          <Button id=\"headers\" color=\"blue\" style={{fontSize: \"20px\"}}>Bet-a-Buddy</Button>\r\n        }\r\n      >\r\n        <Modal.Header id=\"headers\" style={{fontSize: \"50px\"}}>Betting Odds</Modal.Header>\r\n        <Modal.Content  style={{backgroundColor: \"#002244\" }} scrolling>\r\n          <Modal.Description>\r\n            <Grid stackable columns={2} padded=\"vertically\">\r\n              <Grid.Column>\r\n                <Table celled compact definition>\r\n                  <Table.Header fullWidth>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell id=\"headers\" style={{fontSize: \"20px\"}}>Home Team</Table.HeaderCell>\r\n                      <Table.HeaderCell id=\"headers\" style={{fontSize: \"20px\"}}>Away Team</Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Header>\r\n\r\n                  <Table.Body>\r\n                    {NFLgames.map((game) => (\r\n                      <Table.Row \r\n                        key={game.home_team + game.teams[0] + game.teams[1]}\r\n                      >\r\n\r\n                        <Table.Cell style={{backgroundColor:\"grey\"}}>\r\n                          <Button\r\n                            as=\"div\"\r\n                            labelPosition=\"right\"\r\n                            name={game.teams[0] + \" vs \" + game.teams[1]}\r\n                            value={[\r\n                              game.teams[0] + \" vs \" + game.teams[1],\r\n                              game.teams[0],\r\n                              game.sites[0].odds.spreads.points[0],\r\n                            ]}\r\n                            onClick={handleChange}\r\n                          >\r\n                            <Button style={{color:footballColor(game.teams[0]).primary, backgroundColor:footballColor(game.teams[0]).secondary }}icon>{game.teams[0]}</Button>\r\n                            <Label style={{color:footballColor(game.teams[0]).secondary,  backgroundColor:footballColor(game.teams[0]).primary}} basic pointing=\"left\">\r\n                              {game.sites[0].odds.spreads.points[0]}\r\n                            </Label>\r\n                          </Button>\r\n                        </Table.Cell>\r\n                        <Table.Cell style={{backgroundColor:\"grey\"}}>\r\n                          <Button\r\n                            as=\"div\"\r\n                            labelPosition=\"right\"\r\n                            name={game.teams[0] + \" vs \" + game.teams[1]}\r\n                            value={[\r\n                              game.teams[0] + \" vs \" + game.teams[1],\r\n                              game.teams[1],\r\n                              game.sites[0].odds.spreads.points[1],\r\n                            ]}\r\n                            onClick={handleChange}\r\n                          >\r\n                            <Button style={{color:footballColor(game.teams[1]).primary, backgroundColor:footballColor(game.teams[1]).secondary}}icon>{game.teams[1]}</Button>\r\n                            <Label style={{color:footballColor(game.teams[1]).secondary, backgroundColor:footballColor(game.teams[1]).primary}}basic pointing=\"left\">\r\n                              {game.sites[0].odds.spreads.points[1]}\r\n                            </Label>\r\n                          </Button>\r\n                        </Table.Cell>\r\n                      </Table.Row>\r\n                    ))}\r\n                  </Table.Body>\r\n                </Table>\r\n              </Grid.Column>\r\n\r\n              {pickEm.length > 0 ? (\r\n                <Grid.Column>\r\n                  <Card style={{backgroundColor: \"white\"}}>\r\n                    <Card.Header id=\"headers\" style={{fontSize: \"24px\"}}>Sports Ticket</Card.Header>\r\n                    <Card.Content style={{backgroundColor: \"#002244\"}}>\r\n                      <Card.Group>\r\n                        <Table style={{backgroundColor: \"grey\" }}>\r\n                          <Table.Body>\r\n                            <Table.Row>\r\n                              <Table.Cell>\r\n                                {pickEm.map((pick) => (\r\n                                  <Card \r\n                                    fluid\r\n                                    color=\"red\"\r\n                                    key={pick[0] + pick[1] + pick[2]}\r\n                                  >\r\n                                    <p>Game: {pick[0]}</p>\r\n                                    <p>Pick: {pick[1]}</p>\r\n                                    <p>Spread: {pick[2]}</p>\r\n                                  </Card>\r\n                                ))}\r\n                                <Button fluid onClick={() => setPickEm([])}>\r\n                                  Clear Bet\r\n                                </Button>\r\n                              </Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                              <Table.Cell>\r\n                                <SearchForm\r\n                                  handleInputChange={handleInputChange}\r\n                                  users={users}\r\n                                  search={search}\r\n                                />\r\n                              </Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                              <Table.Cell>\r\n                                <Input\r\n                                  onChange={handleInputBet}\r\n                                  labelPosition=\"right\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Amount\"\r\n                                >\r\n                                  <Label basic>$</Label>\r\n                                  <input />\r\n                                  <Label>.00</Label>\r\n                                </Input>\r\n                              </Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                              <Table.Cell>\r\n                                <Button positive onClick={handleSubmit}>\r\n                                  Submit Wager Request\r\n                                </Button>\r\n                              </Table.Cell>\r\n                            </Table.Row>\r\n                          </Table.Body>\r\n                        </Table>\r\n                      </Card.Group>\r\n                    </Card.Content>\r\n                  </Card>\r\n                </Grid.Column>\r\n              ) : (\r\n                <p></p>\r\n              )}\r\n            </Grid>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button negative onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bet;\r\n","import React, { useContext} from \"react\"\r\nimport UserContext from '../../utils/UserContext'\r\nimport { Feed, Image, Button, Popup, Icon, Segment } from \"semantic-ui-react\";\r\nimport moment from \"moment\"\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Notifications = () => {\r\n    const {notifications, deleteNotifications} = useContext(UserContext)\r\n    \r\n    return(\r\n        <>\r\n        {notifications.length > 0 ? (\r\n        <Feed style={{ height: '100vh', margin:\"5px\"  }}>\r\n        {notifications && notifications.map(notification =>(\r\n          <Feed.Event key = {notification._id}>\r\n                    <Feed.Content>\r\n                    <Popup content='Close' trigger={ <Icon color=\"red\" onClick={()=>deleteNotifications(notification._id)}fitted name='close' />} />\r\n                        <Feed.Label>\r\n                            <Image\r\n                            floated='right'\r\n                            size=\"mini\"\r\n                            circular\r\n                            src={notification.sportTicket.userId.profilePic}\r\n                            />\r\n                        </Feed.Label>\r\n                         {notification.type ===\"init wager\"? (\r\n                             <> \r\n                            <Feed.Summary>\r\n                            {notification.sportTicket.userId.username} wants to make a wager of $<strong>{notification.sportTicket.wager}</strong>!\r\n                                <Feed.Date>{moment(notification.createdAt).fromNow()} </Feed.Date>\r\n                            </Feed.Summary>\r\n                            <Feed.Extra>\r\n                                \r\n                                    <Popup content='View the wager' trigger={ <Link to={'/wager/'+ notification.sportTicket._id}><Button compact color='green'><Icon fitted name='eye' /></Button></Link>} />\r\n                                    <Popup content='Decline Wager' trigger={ <Button compact color='red'onClick={()=>deleteNotifications(notification._id)}><Icon fitted name='close' /></Button>} />\r\n                \r\n                            </Feed.Extra>\r\n                            </>\r\n                        ):(\r\n                            <></>  \r\n                        )}\r\n                        {notification.type===\"response wager\" ? (  \r\n                            <Feed.Summary>\r\n                                {notification.sportTicket.competitor.username} has confirm the wager of $<strong>{notification.sportTicket.wager}</strong>!\r\n                                <Feed.Date>{moment(notification.sportTicket.createdAt).fromNow()} </Feed.Date>\r\n                            </Feed.Summary>\r\n                        ):(\r\n                            <></>\r\n                        )}\r\n                        {notification.type===\"update winner\" ? (\r\n                            <Feed.Summary>\r\n                            {notification.sportTicket.updater.username} has indicated that <strong>{notification.sportTicket.winner.username}</strong> has won the bet for ticket {notification.sportTicket._id}!\r\n                            <Feed.Date>{moment(notification.sportTicket.createdAt).fromNow()} </Feed.Date>\r\n                            \r\n                                    <Popup content='View/Edit the Results' trigger={ <Link to={'/wager/'+ notification.sportTicket._id}><Button  color='green'><Icon fitted name='eye' /></Button></Link>} />\r\n                                    <Popup content='Close' trigger={ <Button color='red'onClick={()=>deleteNotifications(notification._id)}><Icon fitted name='close' /></Button>} />\r\n                            \r\n                        </Feed.Summary>\r\n                        ): (<></>)}\r\n                    </Feed.Content>\r\n                </Feed.Event>\r\n                ))}\r\n        </Feed>\r\n        ):(<></>)}\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Notifications","import React, { useEffect, useContext } from \"react\";\r\nimport UserContext from '../utils/UserContext';\r\nimport Login from \"../components/Login\"\r\nimport { Card, Icon, Image,Grid, Popup, Segment, Header } from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport Post from \"../components/Post\"\r\nimport Comments from \"../components/Comments\"\r\nimport Odds from \"../components/Odds\";\r\nimport Edit from \"../components/Edit\";\r\nimport Bet from \"../components/Bet\";\r\nimport Notifications from \"../components/Notifications\";\r\nconst style = {\r\n    h1: {\r\n      padding: '5px'\r\n    },\r\n    button: {\r\n     padding: \"10px\"\r\n    }\r\n  }\r\n\r\nfunction Newsfeed(){   \r\n    const { loggedIn, user, loadPost, AllPost, deletePost} = useContext(UserContext);\r\n   \r\n    useEffect(() => {\r\n      loadPost()\r\n    }, []) \r\n\r\n    return(\r\n        <>\r\n        {loggedIn ? (\r\n            \r\n            <Grid stackable columns=\"equal\">\r\n                  \r\n            <Grid.Column>\r\n                    <Segment basic >\r\n                        <Card>\r\n                            <Odds />\r\n                            <Edit />\r\n                            <Bet />\r\n                        </Card>\r\n                    </Segment>\r\n                </Grid.Column>\r\n                    \r\n                <Grid.Column width ={8}>\r\n                    <Segment style={{ margin:\"10px\", borderColor:\"#008ae6\" }} >\r\n                        <Grid stackable centered>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={16}>\r\n                                    <Post />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row >\r\n                                <Grid.Column width={12}>\r\n                                    <Card.Group  >\r\n                                        {AllPost && AllPost.map(post => (\r\n                                            <Card fluid color=\"blue\" key={post._id} style={style.h1}>\r\n                                                <Card.Content>\r\n                                                    <Popup\r\n                                                        content = {\"Member Since \"+  moment(post.userId.creatAt).format('MMMM  YYYY')}\r\n                                                        header={post.userId.username}\r\n                                                        trigger={ <Image floated=\"left\"  size='tiny' circular src={post.userId.profilePic}/>}\r\n                                                    />\r\n                                                    <Card.Header as='a'> \r\n                                                        <h4>{post.userId.username}</h4>   \r\n                                                    </Card.Header> \r\n                                                    <Card.Meta>\r\n                                                        {moment(post.createdAt).startOf(\"hour\").fromNow()} \r\n                                                    </Card.Meta>\r\n                                                    <Card.Description>\r\n                                                        {user && user._id === post.userId._id ? (\r\n                                                            <Icon className=\"float-right\" fitted name='close' onClick={()=>deletePost(post._id)} />\r\n                                                        ) : (\r\n                                                            <p></p>\r\n                                                        )} \r\n                                                        <h2>{post.post}</h2>\r\n                                                    </Card.Description>\r\n                                                </Card.Content>\r\n                                                <Comments post={post._id} style={style.h1}/>                            \r\n                                            </Card>\r\n                                        ))}\r\n                                    </Card.Group>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                </Grid.Column>\r\n               \r\n                <Grid.Column only=\"computer\">\r\n                    \r\n                        <Card style={{ borderColor:\"blue\", margin:\"10px\"  }} >\r\n                        <Header as='h6' icon>\r\n                            <Icon color=\"blue\" name='bell' />\r\n                            Notifications\r\n                        </Header>\r\n                            <Notifications />\r\n                        </Card>\r\n                   \r\n                </Grid.Column>\r\n            </Grid>\r\n      ) : (          \r\n        <Login />       \r\n        )}   \r\n    </>\r\n    )\r\n}\r\n\r\nexport default Newsfeed;","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Button, Form, Message, Input, Grid,Header, Segment } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport UserContext from '../../utils/UserContext';\r\n\r\nconst Signup = () => {\r\n  const {\r\n    userData,\r\n    handleInputChange,\r\n    handleSignup,\r\n    failureMessage,\r\n  } = useContext(UserContext);\r\n  const [validFirstName, setValidFirstName] = useState(false);\r\n  const [validLastName, setValidLastName] = useState(false);\r\n  const [validEmail, setValidEmail] = useState(false);\r\n  const [validUserName, setValidUserName] = useState(false);\r\n  const [validPassword, setValidPassword] = useState(false);\r\n  const [isConfirmed, setIsConfirmed] = useState(false);\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(errorMessage);\r\n  }, []);\r\n\r\n  const handleConfirmPassword = (event) => {\r\n    const { value } = event.target;\r\n    setConfirmPassword(value);\r\n  };\r\n\r\n  // make sure firstname is at least 3 characters\r\n  const checkFirstname = () => {\r\n    const length = userData.firstname.length;\r\n    if (length === 0) {\r\n      setValidFirstName(false);\r\n      setErrorMessage({ ...errorMessage, firstname: null });\r\n    } else if (length < 3) {\r\n      setValidFirstName(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        firstname: 'First Name should be at least 3 characters.',\r\n      });\r\n    } else {\r\n      setValidFirstName(true);\r\n      setErrorMessage({ ...errorMessage, firstname: null });\r\n    }\r\n  };\r\n  // make sure firstname is at least 3 characters\r\n  const checkLastname = () => {\r\n    const length = userData.lastname.length;\r\n    if (length === 0) {\r\n      setValidLastName(false);\r\n      setErrorMessage({ ...errorMessage, lastname: null });\r\n\r\n    } else if (length < 3) {\r\n      setValidLastName(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        lastname: 'Last Name should be at least 3 characters.',\r\n      });\r\n    } else {\r\n      setValidLastName(true);\r\n      setErrorMessage({ ...errorMessage, lastname: null });\r\n    }\r\n  };\r\n\r\n  // uses regex to check is email is valid\r\n  const checkEmail = () => {\r\n    const validEmail = new RegExp(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    );\r\n    const valid = validEmail.test(userData.email);\r\n    const length = userData.email.length;\r\n    if (length === 0) {\r\n      setValidEmail(false);\r\n      setErrorMessage({ ...errorMessage, email: null });\r\n    } else if (!valid) {\r\n      setValidEmail(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        email: 'Please enter a valid email address.',\r\n      });\r\n    } else {\r\n      setValidEmail(true);\r\n      setErrorMessage({ ...errorMessage, email: null });\r\n    }\r\n  };\r\n\r\n  // make sure username is at least 5 characters\r\n  const checkUsername = () => {\r\n    const length = userData.username.length;\r\n    if (length === 0) {\r\n      setValidUserName(false);\r\n      setErrorMessage({ ...errorMessage, username: null });\r\n    } else if (length < 5) {\r\n      setValidUserName(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        username: 'Username should be at least 5 characters.',\r\n      });\r\n    } else {\r\n      setValidUserName(true);\r\n      setErrorMessage({ ...errorMessage, username: null });\r\n    }\r\n  };\r\n\r\n  // checks is password meets regex test (at least 8 letters, 1 capital and 1 number)\r\n  const checkPassword = () => {\r\n    const strongPassword = new RegExp(\r\n      /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,\r\n    );\r\n    const valid = strongPassword.test(userData.password);\r\n    const length = userData.password.length;\r\n    if (length === 0) {\r\n      setValidPassword(false);\r\n      setErrorMessage({ ...errorMessage, password: null });\r\n    } else if (!valid) {\r\n      setValidPassword(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        password: 'Password should be at least 8 letters, 1 capital & 1 number',\r\n      });\r\n    } else {\r\n      setValidPassword(true);\r\n      setErrorMessage({ ...errorMessage, password: null });\r\n    }\r\n  };\r\n\r\n  // checks if 2 password fields match\r\n  const checkConfirmPassword = () => {\r\n    if (confirmPassword.length === 0) {\r\n      setIsConfirmed(false);\r\n      setErrorMessage({ ...errorMessage, confirmPassword: null });\r\n    } else if (\r\n      userData.password !== null &&\r\n      userData.password === confirmPassword\r\n    ) {\r\n      setIsConfirmed(true);\r\n      setErrorMessage({ ...errorMessage, confirmPassword: null });\r\n    } else {\r\n      setIsConfirmed(false);\r\n      setErrorMessage({\r\n        ...errorMessage,\r\n        confirmPassword: 'Passwords must match',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid textAlign='center' style={{ height: '100vh', margin:\"10px\"  }} verticalAlign='top'>\r\n    <Grid.Column style={{ maxWidth: 450, paddingRight:\"10px\"  }}>\r\n      <Header as='h2' color='blue' textAlign='center'>\r\n         Welcome, signup.\r\n      </Header>\r\n      <Form>\r\n        <Segment>\r\n          <Header as=\"h5\" color=\"red\">{failureMessage}</Header>\r\n            <Form.Field\r\n            control={Input}\r\n            type=\"text\"\r\n            name=\"firstname\"\r\n            id=\"firstname\"\r\n            placeholder=\"First Name\"\r\n            value={userData.firstname}\r\n            onChange={handleInputChange}\r\n            onBlur={checkFirstname}\r\n            valid={validFirstName.toString()}\r\n            error={errorMessage['firstname']}\r\n          />\r\n          <Form.Field\r\n            control={Input}\r\n            type=\"text\"\r\n            name=\"lastname\"\r\n            id=\"lastname\"\r\n            placeholder=\"Last Name \"\r\n            value={userData.lastname}\r\n            onChange={handleInputChange}\r\n            onBlur={checkLastname}\r\n            valid={validLastName.toString()}\r\n            error={errorMessage['lastname']}            \r\n          />\r\n          <Form.Field\r\n            control={Input}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            placeholder=\"Username\"\r\n            value={userData.username}\r\n            onChange={handleInputChange}\r\n            onBlur={checkUsername}\r\n            valid={validUserName.toString()}\r\n            error={errorMessage['username']}            \r\n          />\r\n          <Form.Field\r\n            control={Input}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"email@email.com\"\r\n            value={userData.email}\r\n            onChange={handleInputChange}\r\n            onBlur={checkEmail}\r\n            valid={validEmail.toString()}\r\n            error={errorMessage['email']}    \r\n          />\r\n          <Form.Field\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password\"\r\n            value={userData.password}\r\n            onChange={handleInputChange}\r\n            onBlur={checkPassword}\r\n            valid={validPassword.toString()}\r\n            control={Input}            \r\n            error={errorMessage['password']}\r\n          />\r\n          <Form.Field\r\n             type=\"password\"\r\n             name=\"password\"\r\n             control={Input}\r\n             id=\"confirmPassword\"\r\n             placeholder=\"confirm password\"\r\n             value={confirmPassword}\r\n             onChange={handleConfirmPassword}\r\n             onKeyUp={checkConfirmPassword}\r\n             valid={isConfirmed.toString()} \r\n             error={errorMessage['confirmPassword']}\r\n          />\r\n        {validFirstName &&\r\n        validLastName &&\r\n        validEmail &&\r\n        validUserName &&\r\n        validPassword  ? (\r\n          <Button onClick={handleSignup} color=\"green\" compact >\r\n            Signup\r\n          </Button>\r\n        ) : (\r\n          <Button  color=\"red\" compact disabled>\r\n            Signup\r\n          </Button>\r\n        )}\r\n        <p className=\"signupLink\">\r\n          <Link to=\"/login\">already have an account? Sign in here</Link>\r\n        </p>\r\n        </Segment>\r\n      </Form>\r\n      </Grid.Column>\r\n  </Grid>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport Login from '../../components/Login';\r\nimport Signup from '../../components/Signup';\r\n\r\n\r\nconst Auth = (props) => {\r\n  return (\r\n    <div className=\"authBox\">\r\n      {props.action === 'login' ? <Login /> : <Signup />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from 'react';\r\n\r\nconst NoMatch = () => {\r\n  return <h1>No Match</h1>;\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { useEffect, useContext, useState} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport API from \"../utils/API\"\r\nimport { Button, Icon, Image, Item, Label, Card, Table } from 'semantic-ui-react'\r\nimport UserContext from \"../utils/UserContext\"\r\nimport moment from \"moment\"\r\n\r\nfunction Wager(props){\r\n    const {user} = useContext(UserContext)\r\n    const [currentWager, setCurrentWager] = useState({})\r\n    const [currentWagerAuthor, setCurrentWagerAuthor] = useState({})\r\n    const [currentSportTicket, setCurrentSportTicket] = useState([])\r\n    \r\n    \r\n    const {id} = useParams()\r\n    useEffect(() => {\r\n      loadWager()\r\n    }, [])\r\n\r\n    const handleBetApproval = () =>{\r\n      API.updateBet({\r\n        id:id,\r\n        userId: user._id,\r\n        competitor: currentWagerAuthor._id\r\n      })\r\n      .then(res=>{window.location.href = '/'}) \r\n      .catch(err=>console.log(err))\r\n    }\r\n\r\n\r\n    const loadWager=()=>{\r\n        API.getBet(id)\r\n        .then(res => {\r\n          console.log(res.data)\r\n           setCurrentWager(res.data)\r\n           setCurrentWagerAuthor(res.data.userId)\r\n           setCurrentSportTicket(res.data.sportTicket)\r\n        })\r\n        .catch(err => console.log(err))\r\n        }\r\n\r\n    \r\n      const handleFinalApporval =() =>{\r\n        API.completeBet({id:id})\r\n        .then(window.location.href =\"/\")\r\n      }\r\n\r\n      const handleEdit = () =>{\r\n        console.log(\"edit\")\r\n      }\r\n\r\n    return(\r\n      <Card.Group centered>\r\n        <Card>\r\n          <Card.Content>\r\n            <Image floated=\"left\" circular size='tiny' src={currentWagerAuthor.profilePic} />           \r\n              <Card.Header>{currentWagerAuthor.username}</Card.Header>\r\n              <Card.Meta>\r\n                <span className='cinema'>{moment(currentWager.createdAt).startOf(\"hour\").fromNow()} </span>\r\n              </Card.Meta>\r\n              <Card.Description>\r\n              <Card.Header>Wager: $ {currentWager.wager}</Card.Header>\r\n                <Table celled compact definition >\r\n                    <Table.Header fullWidth>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Game</Table.HeaderCell>\r\n                            <Table.HeaderCell>Selection</Table.HeaderCell>\r\n                            <Table.HeaderCell>Spread</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n\r\n                    <Table.Body>\r\n                      {currentSportTicket.map(ticket=>(\r\n                        <Table.Row key={ticket[0]}>\r\n                            <Table.Cell>\r\n                              {ticket[0]}\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                              {ticket[1]}\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                              {ticket[2]}\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                      ))}\r\n                    </Table.Body>\r\n                </Table>\r\n              </Card.Description>\r\n            </Card.Content>\r\n          {!currentWager.winner ? (\r\n          <Card.Content extra>\r\n            <div className='ui two buttons'>\r\n              <Button onClick={handleBetApproval} compact color='green'>\r\n                Approve \r\n              </Button>\r\n              <Button compact color='red'>\r\n                Decline \r\n              </Button>\r\n            </div>\r\n          </Card.Content>\r\n          ):(\r\n            <Card.Content extra>\r\n              <Card.Header>Winner: {currentWager.winner.username}</Card.Header>\r\n            <div className='ui two buttons'>\r\n              <Button onClick={handleFinalApporval} compact color='green'>\r\n                Approve \r\n              </Button>\r\n              <Button onClick={handleEdit} compact color='red'>\r\n                Decline \r\n              </Button>\r\n            </div>\r\n          </Card.Content>\r\n          )}\r\n          \r\n        </Card>\r\n    </Card.Group>   \r\n    )\r\n}\r\n\r\nexport default Wager;","import React, {useEffect, useState} from \"react\"\r\nimport API from \"../../utils/API\"\r\nimport Ticker from 'react-ticker'\r\n \r\n \r\nconst SportsTicker = () =>{\r\n  const [articles, setArticles] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    API.getSportsNews()\r\n    .then(res=>{\r\n        setArticles(res.data)})\r\n    }, [])\r\n  \r\n    return articles ? (\r\n      <p style={{ whiteSpace: \"nowrap\", color:\"#1F8BFF\" }}>{articles.join(\"++++++\")}+++++++</p>\r\n    ) : (\r\n      <p style={{ visibility: \"hidden\" }}>Placeholder</p>\r\n    );\r\n  };\r\n\r\n  function StockTicker() {\r\n    return (\r\n      <></>\r\n      // <Ticker offset=\"run-in\" speed={4}>\r\n      //   {() => <SportsTicker />}\r\n      // </Ticker>\r\n    );\r\n  }\r\n\r\nexport default StockTicker \r\n\r\n\r\n","import React, { useContext } from \"react\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport { Feed, Image, Button, Popup, Icon, Segment } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Notifications = () => {\r\n  const { notifications, deleteNotifications } = useContext(UserContext);\r\n\r\n  return (\r\n    <>\r\n      \r\n          {notifications.length > 0 ? (\r\n          <Popup position=\"bottom right\" trigger={<Icon color=\"red\" name=\"alarm\" size=\"large\" />}>\r\n        <Popup.Header>Notifications</Popup.Header>\r\n        <Popup.Content>\r\n            <Feed>\r\n              <Segment style={{ height: \"100vh\", margin: \"5px\" }}>\r\n                {notifications &&\r\n                  notifications.map((notification) => (\r\n                    <Feed.Event\r\n                      style={{ height: \"100vh\", margin: \"5px\" }}\r\n                      key={notification._id}\r\n                    >\r\n                      <Feed.Content>\r\n                        <Popup\r\n                          content=\"Close\"\r\n                          trigger={\r\n                            <Icon\r\n                              color=\"red\"\r\n                              onClick={() =>\r\n                                deleteNotifications(notification._id)\r\n                              }\r\n                              fitted\r\n                              name=\"close\"\r\n                            />\r\n                          }\r\n                        />\r\n                        <Feed.Label>\r\n                          <Image\r\n                            floated=\"right\"\r\n                            size=\"mini\"\r\n                            circular\r\n                            src={notification.sportTicket.userId.profilePic}\r\n                          />\r\n                        </Feed.Label>\r\n                        {notification.type === \"init wager\" ? (\r\n                          <>\r\n                            <Feed.Summary>\r\n                              {notification.sportTicket.userId.username} wants\r\n                              to make a wager of $\r\n                              <strong>{notification.sportTicket.wager}</strong>!\r\n                              <Feed.Date>\r\n                                {moment(notification.createdAt).fromNow()}{\" \"}\r\n                              </Feed.Date>\r\n                            </Feed.Summary>\r\n                            <Feed.Extra>\r\n                              <Popup\r\n                                content=\"View the wager\"\r\n                                trigger={\r\n                                  <Link\r\n                                    to={\r\n                                      \"/wager/\" + notification.sportTicket._id\r\n                                    }\r\n                                  >\r\n                                    <Button compact color=\"green\">\r\n                                      <Icon fitted name=\"eye\" />\r\n                                    </Button>\r\n                                  </Link>\r\n                                }\r\n                              />\r\n                              <Popup\r\n                                content=\"Decline Wager\"\r\n                                trigger={\r\n                                  <Button\r\n                                    compact\r\n                                    color=\"red\"\r\n                                    onClick={() =>\r\n                                      deleteNotifications(notification._id)\r\n                                    }\r\n                                  >\r\n                                    <Icon fitted name=\"close\" />\r\n                                  </Button>\r\n                                }\r\n                              />\r\n                            </Feed.Extra>\r\n                          </>\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                        {notification.type === \"response wager\" ? (\r\n                          <Feed.Summary>\r\n                            {notification.sportTicket.competitor.username} has\r\n                            confirm the wager of $\r\n                            <strong>{notification.sportTicket.wager}</strong>!\r\n                            <Feed.Date>\r\n                              {moment(\r\n                                notification.sportTicket.createdAt\r\n                              ).fromNow()}{\" \"}\r\n                            </Feed.Date>\r\n                          </Feed.Summary>\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                        {notification.type === \"update winner\" ? (\r\n                          <Feed.Summary>\r\n                            {notification.sportTicket.updater.username} has\r\n                            indicated that{\" \"}\r\n                            <strong>\r\n                              {notification.sportTicket.winner.username}\r\n                            </strong>{\" \"}\r\n                            has won the bet for ticket{\" \"}\r\n                            {notification.sportTicket._id}!\r\n                            <Feed.Date>\r\n                              {moment(\r\n                                notification.sportTicket.createdAt\r\n                              ).fromNow()}{\" \"}\r\n                            </Feed.Date>\r\n                            <Popup\r\n                              content=\"View/Edit the Results\"\r\n                              trigger={\r\n                                <Link\r\n                                  to={\"/wager/\" + notification.sportTicket._id}\r\n                                >\r\n                                  <Button color=\"green\">\r\n                                    <Icon fitted name=\"eye\" />\r\n                                  </Button>\r\n                                </Link>\r\n                              }\r\n                            />\r\n                            <Popup\r\n                              content=\"Close\"\r\n                              trigger={\r\n                                <Button\r\n                                  color=\"red\"\r\n                                  onClick={() =>\r\n                                    deleteNotifications(notification._id)\r\n                                  }\r\n                                >\r\n                                  <Icon fitted name=\"close\" />\r\n                                </Button>\r\n                              }\r\n                            />\r\n                          </Feed.Summary>\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                      </Feed.Content>\r\n                    </Feed.Event>\r\n                  ))}\r\n              </Segment>\r\n            </Feed>\r\n            </Popup.Content>\r\n      </Popup>\r\n          ) : (\r\n            <Popup position=\"bottom right\" header=\"no new notifications\" trigger={<Icon color=\"black\" name=\"alarm\" size=\"large\" />}/>\r\n          )}\r\n        \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n","import React, { useContext } from \"react\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport SportsTicker from \"../Ticker\";\r\nimport MenuNotifictions from \"../MenuNotificaitons\"\r\nimport {  Menu, Grid,Image, Button } from \"semantic-ui-react\";\r\n\r\nconst Navigation = () => {\r\n  const { loggedIn, logout, user} = useContext(UserContext);\r\n  \r\n  const userPage = () => {\r\n    window.location.href = \"/member/\" + user._id;\r\n  };\r\n  const login = () => {\r\n    window.location.href = \"/login\" ;\r\n  };\r\n  const signup = () => {\r\n    window.location.href = \"/signup\" ;\r\n  };\r\n  const newsfeed = () => {\r\n    window.location.href = \"/newsfeed\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Menu borderless size=\"small\" >\r\n        <Menu.Menu postion=\"left\">\r\n          <Menu.Item>\r\n                <Image onClick={newsfeed} src=\"../../images/logo.jpg\" size=\"tiny\"/>\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n        <Menu.Menu position=\"right\">\r\n        {loggedIn ? (\r\n          <>\r\n            <Menu.Item fitted=\"vertically\">\r\n              <Button id=\"menuButton\" content=\"Newsfeed\" onClick={newsfeed} />\r\n              <Button id=\"menuButton\" content=\"My Accounts\" onClick={userPage} />\r\n              <Button id=\"menuButton\" content=\"Log Out\" onClick={logout} />\r\n            </Menu.Item> \r\n            <Grid>\r\n              <Grid.Column only=\"mobile\">\r\n                <Menu.Item >\r\n                  <MenuNotifictions />\r\n                </Menu.Item>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n          <Menu.Item fitted>\r\n            <Button compact id=\"menuButton\" content=\"Login\" onClick={login}  style={{color:\"#008ae6\" }}/>\r\n            <Button compact id=\"menuButton\" content=\"Signup\" onClick={signup}  style={{color:\"#008ae6\" }}/>\r\n          </Menu.Item>  \r\n      </>\r\n        )}\r\n        </Menu.Menu>\r\n      </Menu>\r\n      <SportsTicker />\r\n    </div>\r\n  );\r\n};\r\nexport default Navigation;\r\n","import React, {useContext } from 'react';\r\nimport UserContext from '../../utils/UserContext'\r\nimport { Card, Grid, Icon, Image,Popup, } from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport Comments from \"../Comments\";\r\n\r\nconst UserPost = ({AllPost}) =>{\r\n    const {user, deletePost} = useContext(UserContext)\r\n\r\n    return (\r\n        <Grid stackable inverted columns={4} textAlign=\"justified\" verticalAlign=\"middle\">\r\n            <Grid.Row id=\"myPostCard\" >\r\n                {AllPost && AllPost.map(post => (\r\n                <Grid.Column key={post._id}>\r\n                            <Card fluid color=\"blue\"  >\r\n                                <Card.Content>\r\n                                <Icon color=\"red\" className=\"float-right\" fitted name='close' \r\n                                    onClick={()=>deletePost(post._id)} />\r\n                                <Popup\r\n                                    content = {\"Member Since \"+  moment(post.userId.creatAt).format('MMMM  YYYY')}\r\n                                    header={post.userId.username}\r\n                                    trigger={ <Image floated=\"left\"  size='tiny' circular src={post.userId.profilePic}/>}\r\n                                />\r\n                                    <Card.Header as='a'> \r\n                                        <h4>{post.userId.username}</h4>   \r\n                                    </Card.Header> \r\n                                    <Card.Meta>\r\n                \r\n                                        {moment(post.createdAt).startOf(\"hour\").fromNow()} \r\n                                    </Card.Meta>\r\n                                    <Card.Description>\r\n                                        <h2>{post.post}</h2>\r\n                                    </Card.Description>\r\n                                </Card.Content>\r\n                                <Comments post={post._id} />                            \r\n                            </Card>     \r\n                    </Grid.Column>\r\n                 ))}\r\n            </Grid.Row>\r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nexport default UserPost","import React, {useState, useContext} from 'react'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\nimport {  Divider, Card, Grid, Segment, Image, Form, Radio } from 'semantic-ui-react'\r\nimport API from '../../utils/API'\r\nimport UserContext from '../../utils/UserContext'\r\n\r\nfunction UpdateResults({bet}) {\r\n  const [open, setOpen] = useState(false)\r\n  const [winner, setWinner] = useState(\"\")\r\n  const {user}= useContext(UserContext)\r\n\r\n  const handleChange = (e, { value }) => setWinner({ value })\r\n\r\n  const submitWinner = (id,competitor) => {\r\n      API.settleBet({\r\n          sportTicket: id,\r\n          winner: winner.value,\r\n          competitor: competitor,\r\n          updater: user._id\r\n    })\r\n    .then(setOpen(false))\r\n  }\r\n \r\n  return (\r\n    <Modal\r\n      centered={false}\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      trigger={<Button compact content='Update Results' icon='signup' size='medium' />\r\n    }\r\n    >\r\n    \r\n      <Modal.Header  key={bet._id}>Ticket #{bet._id}</Modal.Header>\r\n      <Modal.Content scrolling>\r\n        <Modal.Description>\r\n                    <Grid columns={2} relaxed='very' stackable>\r\n                        <Grid.Column>\r\n                            <Card raised fluid>\r\n                                <Card.Content>\r\n                                    <Image size=\"tiny\" circular floated=\"right\" src={bet.competitor.profilePic} />\r\n                                    <Card.Header>{bet.competitor.username}</Card.Header>\r\n                                </Card.Content>\r\n                            </Card>                                \r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column verticalAlign='middle'>\r\n                            <Card raised fluid>\r\n                                <Card.Content>\r\n                                    <Image size=\"tiny\" floated=\"right\" circular src={bet.userId.profilePic}  />\r\n                                    <Card.Header >{bet.userId.username}</Card.Header>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                    \r\n                    <Divider vertical>VS</Divider>\r\n                    {bet.userId.username===user.username ? (\r\n                            <Card raised centered>\r\n                                <Card.Content>\r\n                                    <Card.Header>\r\n                                        You wagered ${bet.wager} against {bet.competitor.username}.\r\n                                    </Card.Header>\r\n                                        {bet.sportTicket.map(ticket=>(\r\n                                            <>\r\n                                    <Card.Description key={bet._id} >\r\n                                        You picked the <strong>{ticket[1]}</strong> at <strong>{ticket[2]}</strong> in the <strong>{ticket[1]} game.</strong> \r\n                                    </Card.Description>\r\n                                    <Card.Meta>\r\n                                        Ticket Ref Number: {bet._id}\r\n                                    </Card.Meta>\r\n                                    </>\r\n                                    ))}\r\n                                </Card.Content>\r\n                                <Card.Content  extra>\r\n                                    <Card.Header>Who won?</Card.Header>\r\n                                    <Form>\r\n                                        <Form.Field>\r\n                                        <Radio\r\n                                            label={bet.userId.username}\r\n                                            name='radioGroup'\r\n                                            value= {bet.userId._id}\r\n                                            checked={winner.value === bet.userId._id}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                        <Radio\r\n                                            label={bet.competitor.username}\r\n                                            name='radioGroup'\r\n                                            value= {bet.competitor._id}\r\n                                            checked={winner.value === bet.competitor._id}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                        </Form.Field>\r\n                                    </Form>\r\n                                    <Button floated=\"right\" compact content=\"Submit\" onClick={()=>submitWinner(bet._id,bet.competitor._id)}  color=\"green\" />\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ):(<></>)}\r\n                    {bet.competitor.username===user.username ? ( \r\n                             <Card centered>\r\n                                <Card.Content>\r\n                                <Card.Header>{bet.userId.username} wagered ${bet.wager} against you .</Card.Header>\r\n                                    {bet.sportTicket.map(ticket=>(\r\n        \r\n                                <Card.Description key={ticket._id,bet.userId.username}>{bet.competitor.username}  picked the <strong>{ticket[1]}</strong> at <strong>{ticket[2]}</strong> in the <strong>{ticket[1]} game.</strong> </Card.Description>\r\n                                        \r\n                                ))}\r\n                                </Card.Content>\r\n                                <Card.Meta>\r\n                                        Ticket Ref Number: {bet._id}\r\n                                </Card.Meta>\r\n                                <Card.Content  extra>\r\n                                    <Card.Header>Who won?</Card.Header>\r\n                                    <Form>\r\n                                        <Form.Field>\r\n                                        <Radio\r\n                                            label={bet.userId.username}\r\n                                            name='radioGroup'\r\n                                            value= {bet.userId._id}\r\n                                            checked={winner.value === bet.userId._id}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                        <Radio\r\n                                            label={bet.competitor.username}\r\n                                            name='radioGroup'\r\n                                            value= {bet.competitor._id}\r\n                                            checked={winner.value === bet.competitor._id}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                        </Form.Field>\r\n                                    </Form>\r\n                                    <Button floated=\"right\" compact content=\"Submit\" onClick={()=>submitWinner(bet._id,bet.competitor._id)}  color=\"green\" />\r\n                                </Card.Content>\r\n                            </Card>\r\n                     ):(<></>)} \r\n                    \r\n                </Grid>\r\n        </Modal.Description>\r\n        \r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color =\"red\" onClick={() => setOpen(false)}>Cancel</Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default UpdateResults\r\n","import React, { useContext } from 'react';\r\nimport UserContext from '../../utils/UserContext'\r\n\r\nimport {  Header, Grid, Segment, Image, Card } from 'semantic-ui-react'\r\nimport UpdateResults from '../UpdateResults';\r\n\r\nconst UserBet = ({allBets}) =>{\r\n    const {user} = useContext(UserContext)\r\n\r\n    return (\r\n        \r\n        <> \r\n        <Grid  centered columns={4} stackable>\r\n            <Grid.Row>\r\n                {allBets.map(bet=>(\r\n                <Grid.Column>\r\n                    {bet.completed===false ? ( \r\n                        <Segment>\r\n                            <Grid centered divided=\"vertically\" columns={2}>\r\n                                <Grid.Row only=\"computer\">\r\n                                        <Grid.Column width={5}>               \r\n                                            <Image size=\"tiny\" circular floated=\"right\" src={bet.competitor.profilePic} />\r\n                                            <Header>{bet.competitor.username}</Header>                      \r\n                                        </Grid.Column>\r\n                                        <Grid.Column width={2}>               \r\n                                            <Header>vs</Header>                      \r\n                                        </Grid.Column>\r\n                                        <Grid.Column width={5}>       \r\n                                            <Image size=\"tiny\" floated=\"left\" circular src={bet.userId.profilePic}></Image>\r\n                                            <Header floated=\"right\">{bet.userId.username}</Header>\r\n                                        </Grid.Column> \r\n                                    </Grid.Row>\r\n                                    <Grid.Row>\r\n                                    {bet.userId.username===user.username ? (\r\n                                        <Card centered>\r\n                                            <Card.Content>\r\n                                                <Card.Header>\r\n                                                    You wagered ${bet.wager} against {bet.competitor.username}.\r\n                                                </Card.Header>\r\n                                                    {bet.sportTicket.map(ticket=>(\r\n                                                        <>\r\n                                                <Card.Description key={bet._id} >\r\n                                                    You picked the <strong>{ticket[1]}</strong> at <strong>{ticket[2]}</strong> in the <strong>{ticket[1]} game.</strong> \r\n                                                </Card.Description>\r\n                                                <Card.Meta>\r\n                                                    Ticket Ref Number: {bet._id}\r\n                                                </Card.Meta>\r\n                                                </>\r\n                                                ))}\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                    ):(<></>)}\r\n                                    {bet.competitor.username===user.username ? ( \r\n                                        <Card centered>\r\n                                            <Card.Content>\r\n                                            <Card.Header>{bet.userId.username} wagered ${bet.wager} against you .</Card.Header>\r\n                                                {bet.sportTicket.map(ticket=>(\r\n                                            <Card.Description key={ticket._id,bet.userId.username}>{bet.userId.username}  picked the <strong>{ticket[1]}</strong> at <strong>{ticket[2]}</strong> in the <strong>{ticket[1]} game.</strong> </Card.Description>\r\n                                            ))}\r\n                                            </Card.Content>\r\n                                            <Card.Meta>\r\n                                                    Ticket Ref Number: {bet._id}\r\n                                            </Card.Meta>\r\n                                        </Card>\r\n                                        ):(<></>)} \r\n                                    </Grid.Row>     \r\n                                    <Grid.Row>\r\n                                        <UpdateResults key={bet._id} bet={bet} />    \r\n                                    </Grid.Row>         \r\n                                </Grid>\r\n                            </Segment>\r\n                    ):(<></>)}\r\n\r\n                </Grid.Column> \r\n                ))}\r\n            </Grid.Row>\r\n        </Grid>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default UserBet","import React, { useContext } from 'react';\r\nimport UserContext from '../../utils/UserContext'\r\nimport { Card, Grid} from 'semantic-ui-react'\r\n\r\nconst Results = ({allBets}) =>{\r\n    const {user} = useContext(UserContext)\r\n\r\n    return (\r\n        <Grid centered columns={4} stackable>\r\n            <Grid.Row>\r\n        {allBets.map(bet => (\r\n            <>\r\n            {bet.completed ===true? (\r\n                <Grid.Column style={{marginTop:\"10px\"}}>\r\n                    <Card>\r\n                        <Card.Content>\r\n                            <Card.Header>ticket # {bet._id}</Card.Header>\r\n                            <Card.Description>\r\n                                {bet.userId.username} wagered ${bet.wager} on the {bet.sportTicket[0][1]} at {bet.sportTicket[0][2]} in the {bet.sportTicket[0][0]} game.\r\n                            </Card.Description>\r\n                        </Card.Content>\r\n                        {bet.winner._id===user._id ? (\r\n                        <Card.Content extra>\r\n                               <Card.Header >Congrats! You won this wager for {bet.wager}</Card.Header>\r\n                        </Card.Content>\r\n                        ):(\r\n                        <Card.Content extra>\r\n                            <Card.Header >Sorry! You loss this wager for {bet.wager}</Card.Header>\r\n                        </Card.Content>\r\n                        )}\r\n                        \r\n                    </Card>\r\n\r\n\r\n                </Grid.Column>                 \r\n            ):(<></>)}\r\n            </>\r\n            ))}\r\n\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Results","import React, { useState, useEffect } from 'react';\r\nimport { Tab } from 'semantic-ui-react'\r\nimport UserPost from '../components/UserPost'\r\nimport UserBets from '../components/UserBet'\r\nimport { useParams } from \"react-router-dom\";\r\nimport API from '../utils/API';\r\nimport Results from '../components/Result'\r\n\r\n\r\nconst Member = () => {\r\n    const [AllPost, setAllPost] = useState([])\r\n    const [allBets, setAllBets] = useState([])\r\n\r\n    const {id} = useParams()\r\n    const panes = [\r\n      { menuItem: 'My Posts', render: () => <Tab.Pane><UserPost AllPost={AllPost} /></Tab.Pane> },\r\n      { menuItem: 'My Bets', render: () => <Tab.Pane><UserBets allBets={allBets}/></Tab.Pane> },\r\n      { menuItem: 'My Results', render: () => <Tab.Pane><Results allBets={allBets}/></Tab.Pane> },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        API.newsfeedByID(id)\r\n        .then(res=>{\r\n            setAllPost(res.data)\r\n        })\r\n        API.getUserBet(id)\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setAllBets(res.data.sportTicket)\r\n        })      \r\n      }, []);\r\n\r\n    return( \r\n\r\n      <Tab menu={{ fluid: true, vertical: true, tabular: true }} panes={panes} />\r\n    \r\n    )\r\n \r\n}\r\n\r\nexport default Member","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Edit from \"./components/Edit\"\r\nimport API from './utils/API';\r\nimport Newsfeed from './pages/Newsfeed';\r\nimport Auth from './pages/Auth';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Wager from \"./pages/Wager\"\r\nimport TopNav from './components/TopNav';\r\nimport UserContext from './utils/UserContext';\r\nimport Comment from \"./components/Comments\"\r\nimport Bet from \"./components/Bet\"\r\nimport Notifications from \"./components/Notifications\"\r\nimport Member from \"./pages/Member\"\r\nimport UserPost from \"./components/UserPost\"\r\nimport UpdateResult from './components/UpdateResults'\r\n\r\nconst App = () => {\r\n  const [userData, setUserData] = useState({\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    username: '',\r\n    password: '',\r\n  });\r\n  const [loggedIn, setLoggedin] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [failureMessage, setFailureMessage] = useState();\r\n  const [loginFailureMessage, setLoginFailureMessage] = useState(\"\")\r\n  const [notifications, setNotifications] = useState([])\r\n  const [AllPost, setAllPost] = useState([])\r\n  const [Post, setPost] = useState(\"\")\r\n\r\n\r\n  useEffect(() => {\r\n    isLoggedIn();\r\n  }, []);\r\n\r\n  const deleteNotifications = (id) =>{\r\n    API.deleteNotifications(id)\r\n      .then( \r\n        API.getNotifications(user._id)\r\n        .then(res=>{\r\n          console.log(res.data)\r\n          setNotifications(res.data)\r\n        })\r\n      )\r\n      .catch(err=> console.log(err))\r\n  }\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  };\r\n\r\n  const handleLogin = (event) => {\r\n    event.preventDefault();\r\n    const data = {\r\n      username: userData.username,\r\n      password: userData.password,\r\n    };\r\n    if (userData.username && userData.password) {\r\n      API.login(data)\r\n        .then((user) => {\r\n          if (user.data.loggedIn) {\r\n            setLoggedin(true);\r\n            setUser(user.data.user);\r\n            console.log('log in successful');\r\n            window.location.href = '/';\r\n          } else {\r\n            console.log('Something went wrong :(');\r\n            setLoginFailureMessage('Login failed, Please try again.');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSignup = (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const data = {\r\n        firstname: userData.firstname,\r\n        lastname: userData.lastname,\r\n        email: userData.email,\r\n        username: userData.username,\r\n        password: userData.password,\r\n      };\r\n\r\n      if (userData.username && userData.password) {\r\n        API.signup(data)\r\n          .then((user) => {\r\n            if (user.data === 'email is already in use') {\r\n              setFailureMessage('Email already in use.');\r\n            }\r\n            if (user.data === 'user already exists') {\r\n              setFailureMessage('User already exists. Choose another username.');\r\n            }\r\n            if (user.data.loggedIn) {\r\n              if (user.data.loggedIn) {\r\n                setLoggedin(true);\r\n                setUser(user.data.user);\r\n                window.location.href = '/';\r\n              } else {\r\n                console.log('something went wrong :(');\r\n                console.log(user.data);\r\n                setFailureMessage(user.data);\r\n              }\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    } catch (error) {\r\n      console.log('App -> error', error);\r\n    }\r\n  };\r\n\r\n  const loadPost =() => {\r\n    API.newsfeed()\r\n    .then(res => {\r\n        setAllPost(res.data)\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n  const isLoggedIn = () => {\r\n    if (!loggedIn) {\r\n      API.isLoggedIn().then((user) => {\r\n        if (user.data.loggedIn) {\r\n          setLoggedin(true);\r\n          setUser(user.data.user);\r\n      API.getNotifications(user.data.user._id)\r\n          .then(res=>{\r\n            console.log(res.data)\r\n            setNotifications(res.data)\r\n          })\r\n        } else {\r\n          console.log(user.data.message);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    if (loggedIn) {\r\n      API.logout().then(() => {\r\n        console.log('logged out successfully');\r\n        setLoggedin(false);\r\n        setUser(null);\r\n      });\r\n    }\r\n  }; \r\n\r\n  const handleUserBtnClick = async (e) => {\r\n    try {\r\n      const res = await API.postPost({\r\n        post: Post,\r\n        userId: user\r\n\r\n      })\r\n      setPost(\"\")\r\n      loadPost()\r\n    } catch (error) {\r\n      console.log(\r\n        \"There was an error processing your results, please try again\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  function deletePost(id) {\r\n    API.deletePost(id)\r\n      .then(res => loadPost())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  const contextValue = {\r\n    userData,\r\n    loggedIn,\r\n    user,\r\n    failureMessage,\r\n    loginFailureMessage,\r\n    notifications,\r\n    AllPost,\r\n    handleInputChange,\r\n    handleLogin,\r\n    handleSignup,\r\n    logout,\r\n    setUser,\r\n    deleteNotifications,\r\n    loadPost,\r\n    setPost,\r\n    handleUserBtnClick,\r\n    deletePost\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      <Router>\r\n        <div>\r\n          <TopNav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Newsfeed} />\r\n              <Route\r\n                exact\r\n                path=\"/login\"\r\n                render={() => <Auth action=\"login\" />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/signup\"\r\n                render={() => <Auth action=\"signup\" />}\r\n              />\r\n              <Route exact path=\"/newsfeed\" component={Newsfeed} />\r\n              <Route exact path=\"/member/:id\" component={Member} />\r\n              <Route exact path=\"/wager/:id\" component={Wager} />\r\n              <Route render={NoMatch} />\r\n              <Comment />\r\n              <Edit />\r\n              <Bet />\r\n              <Notifications />\r\n              <UserPost />\r\n              <UpdateResult />\r\n            </Switch>\r\n        </div>\r\n      </Router>\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './App.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}